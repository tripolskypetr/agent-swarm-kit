import { AgentName } from "../interfaces/Agent.interface";

/**
 * Interface representing an incoming message received by the swarm system.
 * Encapsulates a message entering the system, typically from a client (e.g., user input), processed by agents (e.g., ClientAgent.execute) or sessions (e.g., ISession.connect).
 * Used to convey data from an external source to an agent, potentially triggering actions like history updates (e.g., IHistory.push) or event emissions (e.g., IBus.emit "commit-user-message").
*/
export interface IIncomingMessage {
  /**
   * The unique identifier of the client sending the message.
   * Identifies the originating client session, matching clientId in runtime params (e.g., this.params.clientId in ClientAgent), ensuring the message is tied to a specific sender.
   * Example: "client-123" for a user session submitting a command.
   */
  clientId: string;

  /**
   * The content or payload of the incoming message.
   * Contains the raw data sent by the client, typically a string (e.g., user command, query), processed as input by agents (e.g., incoming in ClientAgent.execute).
   * Example: "What is the weather?" for a user query received by an agent.
   */
  data: string;

  /**
   * The name of the agent designated to receive or process the message.
   * Links the message to a specific agent instance (e.g., this.params.agentName in ClientAgent), aligning with AgentName from IAgentParams for routing or context.
   * Example: "WeatherAgent" for an agent handling weather-related queries.
   */
  agentName: AgentName;
}

/**
 * Interface representing an outgoing message sent from the swarm system.
 * Encapsulates a message dispatched to a client, typically an agent’s response or output (e.g., ClientAgent._emitOutput), delivered via sessions (e.g., ISession.emit) or events (e.g., IBus.emit "emit-output").
 * Used to communicate results or notifications back to the client, reflecting the system’s response to incoming messages or internal actions.
*/
export interface IOutgoingMessage {
  /**
   * The unique identifier of the client receiving the message.
   * Specifies the target client session, matching clientId in runtime params (e.g., this.params.clientId in ClientAgent), ensuring delivery to the intended recipient.
   * Example: "client-123" for a user session receiving a response.
   */
  clientId: string;

  /**
   * The content or payload of the outgoing message.
   * Contains the data sent to the client, typically a string (e.g., processed result, assistant response), generated by agents (e.g., result in ClientAgent._emitOutput).
   * Example: "The weather is sunny." for an agent’s response to a query.
   */
  data: string;

  /**
   * The name of the agent sending the message.
   * Identifies the originating agent instance (e.g., this.params.agentName in ClientAgent), aligning with AgentName from IAgentParams to indicate the source of the response.
   * Example: "WeatherAgent" for an agent replying to a client query.
   */
  agentName: AgentName;
}
